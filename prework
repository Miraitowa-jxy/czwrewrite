PrettyTable 是一个用于生成 ASCII 表格的轻量级库，常用于格式化输出数据，特别是在命令行或简单报告中。通过 C++ 重写 PrettyTable，可以进一步优化性能，并为项目添加更加高效和定制化的表格格式化功能。

架构描述
1. 项目概览
项目目标是实现一个高效、可扩展的 C++ 库，用于格式化输出数据为表格样式，支持特性包括：表格样式自定义、数据动态插入、列对齐、宽度自动调整等。

项目名称： PrettyTableCPP
语言： C++
依赖： 无外部依赖（标准库实现）
目标用户： 开发者、研究人员、系统管理员

2. 核心模块设计
表格管理模块（Table Manager）

管理表格的整体布局与样式。
支持动态添加/删除行、列功能。
提供接口用于自定义标题、边框、对齐方式、单元格宽度等。
行列操作模块（Row & Column Operations）

管理单行、单列的数据和属性。
支持根据数据长度动态调整列宽。
提供对齐选项：左对齐、右对齐、居中对齐。
样式控制模块（Style Controller）

提供可配置的边框、分隔符、对齐方式。
支持多种预定义样式（如简约风格、加粗风格）。
支持自定义单元格的填充字符（例如 |, -, =）。
输入输出模块（IO Module）

提供格式化表格的输出接口。
支持打印到控制台或保存为文本文件。

3. 核心功能描述

表格初始化
初始化一个空表格，指定列数和列名。
示例：Table table({"Name", "Age", "City"});

数据动态插入
添加单行、单列数据，并自动调整列宽。
示例：table.addRow({"Alice", "30", "New York"});

样式设置
支持设置表格的边框字符、对齐方式、列宽限制。

示例：
table.setStyle(BoldStyle); // 设置加粗风格
table.setAlignment(CENTER); // 设置列居中对齐

输出接口
将表格打印到控制台。
保存为 .txt 文件，支持追加模式。

示例：
table.print(); // 输出到控制台
table.saveToFile("output.txt"); // 保存到文件

多样式支持
支持预定义样式：简约风格、Markdown 风格、加粗边框等。
自定义样式接口：允许用户指定分隔符、填充字符等。

4. 类与方法设计
Table 类
属性：
vector<string> column_names;
vector<vector<string>> data;
Style style;

方法：
Table(const vector<string>& column_names);
void addRow(const vector<string>& row);
void addColumn(const string& column_name, const vector<string>& column_data);
void setStyle(const Style& style);
void print() const;
void saveToFile(const string& file_name, bool append = false) const;

Style 类
属性：
char vertical_border;
char horizontal_border;
char corner;
Alignment alignment; // 左、右、居中
方法：
Style(char vertical, char horizontal, char corner, Alignment align);
Alignment 枚举值： LEFT, RIGHT, CENTER

5. 项目扩展性
支持 CSV 文件输入输出：
提供从 CSV 文件读取数据生成表格的功能。

支持国际化（Unicode 支持）：
兼容非拉丁字符集（如中文、日文）。

性能优化：
使用多线程优化大表格输出（行级别并行）。

跨平台支持：
确保在 Windows 和 Linux 下无差异运行。

6. 项目使用示例

#include "PrettyTable.h"

int main() {
    Table table({"Name", "Age", "City"});
    table.addRow({"Alice", "30", "New York"});
    table.addRow({"Bob", "25", "Los Angeles"});
    table.setStyle(Style('|', '-', '+', CENTER));
    table.print();

    table.saveToFile("output.txt");
    return 0;
}

7. 学习与应用价值
学习 C++ 动态内存管理与数据结构的设计。
掌握面向对象设计原则，尤其是模块化和类封装技术。
优化 I/O 性能，提升对复杂系统的理解能力。
为 C++ 项目开发者提供更灵活的表格工具，有助于生成更美观的输出。
